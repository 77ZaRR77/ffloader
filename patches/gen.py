'''
    Project: Fur Fighter Loader
    Generate C patches from 1337 for Loader

    Date: 06/02/2022
    Author: Arves100
'''
import os

class PatchInfo:
    def __init__(self, offset: str, original: str, patched: str):
        self.offset = offset
        self.original = original
        self.patched = patched

class PatchArray:
    def __init__(self, origName: str):
        self.origName = origName
        self.patches = []

PATCHES = {}

def addPatch(file: str, name: str, origName: str) -> None:
    global PATCHES
    infos = PatchArray(origName)

    with open(file, "r") as fp:
        for line in fp:
            if line[0] == '>':
                continue

            pos = line.find(':')
            if pos == -1:
                continue
            pos2 = line.find("->")
            if pos2 == -1:
                continue

            offset = "0x"
            original = "0x"
            patched = "0x"

            offset += line[:pos]
            original += line[pos+1:pos2]
            patched += line[pos2+2:].strip()
            infos.patches.append(PatchInfo(offset, original, patched))

        if name in PATCHES:
            PATCHES[name].append(infos)
        else:
            PATCHES.update({ name : [ infos ] })

def readDir(dir : str, name : str):
    for root, _, files in os.walk(dir):
        for file in files:
            if file[-5:] == ".1337":
                addPatch(os.path.join(root, file), name, file)

def main():
    for root, dirs, _ in os.walk(os.curdir):
        for dir in dirs:
            readDir(os.path.join(root, dir), dir)

    for k, v in PATCHES.items():
        kupper = k.upper()
        with open("".join((k, ".h")), "w") as fp:
            fp.write("/*\n   THIS FILE WAS AUTOGENERATED BY gen.py\n   MODIFY THIS FILE AT YOUR OWN RISK!!!\n*/\n")
            fp.write("#pragma once\n")
            fp.write("#include \"../PatchBase.h\"\n\n")

            i = 1
            for patches in v:
                fp.write("".join(("// ", patches.origName)))
                fp.write("\nconstexpr PatchBytes ")
                fp.write(kupper)
                fp.write("".join(("_PATCH_", str(i))))
                fp.write("[] =\n{\n")

                for patch in patches.patches:
                    fp.write("\t{ ")
                    fp.write(patch.offset)
                    fp.write(", ")
                    fp.write(patch.original)
                    fp.write(", ")
                    fp.write(patch.patched)
                    fp.write(" },\n")

                fp.write("};\n\n")
                i += 1
            
            fp.write("constexpr PatchArray ")
            fp.write(kupper)
            fp.write("_PATCH_ARRAY[] =\n{\n")

            i = 1
            for patches in v:
                fp.write("\t{ ")
                fp.write(kupper)
                fp.write("_PATCH_")
                fp.write(str(i))
                fp.write(", ")
                fp.write(str(len(patches.patches)))
                fp.write(" },\n")
                i += 1

            fp.write("};\n\n")

            fp.write("inline void ")
            fp.write("".join(("Apply", kupper)))
            fp.write("()\n{\n\tApplyPatch(")
            fp.write(kupper)
            fp.write("_PATCH_ARRAY, ARRAYSIZE(")
            fp.write(kupper)
            fp.write("_PATCH_ARRAY), L\"")
            fp.write(k)
            fp.write("\");\n}\n\n")

    '''with open("../Patches.h", "w") as fp:
        fp.write("/*\n   THIS FILE WAS AUTOGENERATED BY gen.py\n   MODIFY THIS FILE AT YOUR OWN RISK!!!\n*/\n")
        fp.write("#pragma once\n")
        for k in PATCHES.keys():
            fp.write("#include \"patches/")
            fp.write(k)
            fp.write(".h\"\n")

        fp.write("\nstatic void ApplyPatches()\n{\n")

        for k in PATCHES.keys():
            fp.write("\tApply")
            fp.write(k.upper())
            fp.write("();\n")
            
        fp.write("}\n")'''

if __name__ == "__main__":
    main()
